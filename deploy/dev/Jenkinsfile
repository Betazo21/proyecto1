pipeline {
    agent any
    
    tools {
        jdk 'JAVA17'
        maven 'mv392'
    }

    environment{
        REGISTRYLOCATION = "https://www.google.com/"
    }
    
    stages {
           stage('Initialize'){
            steps{
                script{
                        echo "Inicializando"
                        sh 'java --version'
                        sh "mvn -version"
                    }
                }
             }   
            stage ('Build - Service Usuarios') {
                when{
                    anyOf{
                        changeset "*services/service-usuarios/**"
                        expression{
                            currentBuild.previousBuild.result != "SUCCESS"
                        }
                    }
                }
                steps {
                    script{
                       dir("services/service-usuarios/"){
                        sh "sed -i 's#SONARURL#$SONARURL#g' settings.xml"
                        sh "sed -i 's#SONARPROJECTKEY#$SONARPROJECTKEY#g' settings.xml"
                        sh "sed -i 's#PROJECTNAME#$PROJECTNAME#g' settings.xml"
                         withCredentials([usernamePassword(credentialsId: 'SONARTOKEN_MSUSUARIOS', passwordVariable: 'secretToken', usernameVariable: 'user')]){
                            sh "sed -i 's#SONARTOKEN_MSUSUARIOS#$secretToken#g' settings.xml"
                         }
                        sh "mvn -s settings.xml clean verify sonar:sonar"
                        sh "mvn package"
                        sh "ls target"
                        DockerBuildAndPush("serviceclientes")
                       }
                    }
                }    
            }

             stage ('Deploy - Service Usuarios') {
                steps {
                    script{
                       dir("deploy/app/service-usuarios/"){
                        sh "sed -i 's#SERVICEIMAGE#$DOCKER_REPO:serviceclientes#g' deploy.yaml"
                        DeployKubernetes("deploy.yaml")
                       }
                    }
                }    
            }
    }
}

def DockerBuildAndPush(entity){
    sh "DOCKER_HOST=tcp://$DOCKERHOST docker build -f 'Dockerfile' -t $DOCKER_REPO:${entity} . --no-cache --network host"
    sh "DOCKER_HOST=tcp://$DOCKERHOST docker push $DOCKER_REPO:${entity}"
}

def DeployKubernetes(deployfile){
    sh " kubectl --insecure-skip-tls-verify apply -f ${deployfile}"
}